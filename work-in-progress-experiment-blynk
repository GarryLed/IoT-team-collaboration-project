/*************************************************************

  This is a simple demo of sending and receiving some data.
  Be sure to check out other examples!
 *************************************************************/

/* Fill-in information from Blynk Device Info here */
#define BLYNK_TEMPLATE_ID           "TMPL4PYeJ_F5E"
#define BLYNK_TEMPLATE_NAME         "Quickstart Template"
#define BLYNK_AUTH_TOKEN            "tlBzvrxvrGKnUsGuzhj_a2vAUTDogRzM"

/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial


#include <Bridge.h>
#include <BlynkSimpleYun.h>


#include <Wire.h>

#include "rgb_lcd.h" // downloaded Grove_LCD_RGB_Backlight zip from Github at https://github.com/Seeed-Studio/Grove_LCD_RGB_Backlight

rgb_lcd lcd;

const int buttonPin = 4; // Button pin in D4 of Groove kit 
const int buzzerPin = 8; // Buzzer pin in D8 of Groove kit 
const int pinTemp = 3;
int buttonState = 0;
bool monitoring = false; // initialize monitoring variable to false 
 float tempCelsius = 99; // change this value to a value of 31 or more to execute the HIGH temp block of code 
float tempThreshold = 30.0; // Threshold temperature in Celsius



BlynkTimer timer;

// This function is called every time the Virtual Pin 0 state changes
BLYNK_WRITE(V0)
{
  // Set incoming value from pin V0 to a variable
  int value = param.asInt();

  // Update state
  Blynk.virtualWrite(V1, value);
  if(value==1){
    digitalWrite(13,HIGH);
  }
    if(value==0){
    digitalWrite(13,LOW);
  }
  
}

// This function is called every time the device is connected to the Blynk.Cloud
BLYNK_CONNECTED()
{
  // Change Web Link Button message to "Congratulations!"
  Blynk.setProperty(V3, "offImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations.png");
  Blynk.setProperty(V3, "onImageUrl",  "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations_pressed.png");
  Blynk.setProperty(V3, "url", "https://docs.blynk.io/en/getting-started/what-do-i-need-to-blynk/how-quickstart-device-was-made");
}

// This function sends Arduino's uptime every second to Virtual Pin 2.
void myTimerEvent()
{
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(V2, millis() / 1000);
}

void setup()
{
  // Debug console
  Serial.begin(115200);

  Blynk.begin(BLYNK_AUTH_TOKEN);
  // You can also specify server:
  //Blynk.begin(BLYNK_AUTH_TOKEN, "blynk.cloud", 80);
  //Blynk.begin(BLYNK_AUTH_TOKEN, IPAddress(192,168,1,100), 8080);
Blynk.setProperty(V1, "label", "Temparature" );
Blynk.setProperty(V3, "label", tempCelsius );
//Blynk.printBanner(V1, tempCelsius);
  // Setup a function to be called every second

   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  timer.setInterval(1000L, myTimerEvent);

  pinMode(buttonPin, INPUT);
  pinMode(buzzerPin, OUTPUT);

  lcd.begin(16, 2);

  Serial.begin(9600); // Start serial communication at 9600 baud rate
   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

void loop()
{
  
  Blynk.run();
  timer.run();
  // You can inject your own code or combine it with other sketches.
  // Check other examples on how to communicate with Blynk. Remember
  // to avoid delay() function!


 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  buttonState = digitalRead(buttonPin); // reads the digital value (HIGH or LOW) from the input button 
  if (buttonState == HIGH) { // checks if button is pressed or not 
    monitoring = !monitoring; // Toggle monitoring state between false and true state (this is used for the button and will be used for testing purposes only) 
    delay(500);
  }
  if (monitoring == HIGH) { // if button is toggled on 

    if (tempCelsius > tempThreshold) { // if current temp is greater than temp threshold then this block will execute 
      tone(buzzerPin, 1000); // Turn on the buzzer at 1000Hz
      lcd.setCursor(0, 0); // LCD cursor is positioned at the beginning of the first line 
      lcd.print("WARNING: Temp:"); // displays warning message to user 
      lcd.setCursor(0, 1); // cursor is moved to second line 
      float tempCelsius = analogRead(pinTemp);
      lcd.print(tempCelsius);
       Serial.println(tempCelsius);
    } else {
      noTone(buzzerPin); // Buzzer is turned off 
      lcd.setCursor(0, 0);
      lcd.print("Temperature OK!:"); // message displaying normal temperature 
      lcd.setCursor(0, 1);
      lcd.print(tempCelsius);
    }
  } else { // default state when button is in the off position 
    noTone(buzzerPin);
    lcd.clear();
    lcd.print(tempCelsius); // display message
    float tempCelsius = 99;
      lcd.print("Test");
  }
  delay(1000); // Main loop delay

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
// BLYNK_WRITE(V1) {   
//   // Called when the datastream virtual pin V2 is updated 
//   // by Blynk.Console, Blynk.App, or HTTP API. 


//   // OR:
//   float value = param.asString(tempCelsius);
//   Serial.print("V1 = '");
//   Serial.print(value);
//   Serial.println("'");    
    
// } // BLYNK_WRITE()
